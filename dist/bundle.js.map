{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///external \"THREE\"","webpack:///./src/ts/core/tile.ts","webpack:///./src/ts/core/drawable.ts","webpack:///./src/ts/core/group.ts","webpack:///./src/ts/core/settings.ts","webpack:///./src/ts/tiles/wood.ts","webpack:///./src/ts/core/worldobject.ts","webpack:///./src/ts/core/wall.ts","webpack:///./src/ts/core/helpers.ts","webpack:///./src/ts/core/chunk.ts","webpack:///./src/ts/classes/world.ts","webpack:///./src/ts/classes/character.ts","webpack:///./src/ts/classes/player.ts","webpack:///./src/ts/core/canvas.ts","webpack:///./src/ts/classes/game.ts","webpack:///./src/index.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","object","property","prototype","hasOwnProperty","p","s","THREE","Tile","size","Drawable","this","geometry","PlaneGeometry","material","MeshBasicMaterial","color","shape","Mesh","_position","x","y","z","updateShape","setGeometry","geo","setMaterial","setX","newx","position","setY","newy","newz","setPosition","newposition","Group","group","DEBUG","Settings","WoodTile","drawable_1","tile_1","WorldObject","_super","_this","apply","arguments","chunkPosition","__extends","chunkX","chunkY","Wall","tileWidth","tileHeight","tile","updateTileSize","width","height","tileSize","degreesToRadians","degrees","Math","PI","helpers_1","group_1","settings_1","Chunk","worldPosition","addGrid","updateGroupPosition","addDrawable","add","helper","GridHelper","rotateX","chunk_1","wall_1","wood_1","World","chunkSize","chunk","wall","addChunk","Character","Player","zindex","Canvas","loopRunning","updateSize","calcWidth","calcHeight","camera","left","right","top","bottom","updateProjectionMatrix","renderer","setSize","update","loop","requestAnimationFrame","loadScene","loadCamera","loadRenderer","addOrbitControls","startLoop","lookAt","append","scene","controls","render","window","stopLoop","innerWidth","innerHeight","Scene","OrthographicCamera","set","WebGLRenderer","$","appendChild","domElement","OrbitControls","canvas_1","player_1","world_1","Game","loadCanvas","newPlayer","newWorld","canvas","player","world","game","addEventListener"],"mappings":"aACA,IAAAA,KAGA,SAAAC,EAAAC,GAGA,GAAAF,EAAAE,GACA,OAAAF,EAAAE,GAAAC,QAGA,IAAAC,EAAAJ,EAAAE,IACAG,EAAAH,EACAI,GAAA,EACAH,YAUA,OANAI,EAAAL,GAAAM,KAAAJ,EAAAD,QAAAC,IAAAD,QAAAF,GAGAG,EAAAE,GAAA,EAGAF,EAAAD,QAKAF,EAAAQ,EAAAF,EAGAN,EAAAS,EAAAV,EAGAC,EAAAU,EAAA,SAAAR,EAAAS,EAAAC,GACAZ,EAAAa,EAAAX,EAAAS,IACAG,OAAAC,eAAAb,EAAAS,GACAK,cAAA,EACAC,YAAA,EACAC,IAAAN,KAMAZ,EAAAmB,EAAA,SAAAjB,GACAY,OAAAC,eAAAb,EAAA,cAAiDkB,OAAA,KAIjDpB,EAAAqB,EAAA,SAAAlB,GACA,IAAAS,EAAAT,KAAAmB,WACA,WAA2B,OAAAnB,EAAA,SAC3B,WAAiC,OAAAA,GAEjC,OADAH,EAAAU,EAAAE,EAAA,IAAAA,GACAA,GAIAZ,EAAAa,EAAA,SAAAU,EAAAC,GAAsD,OAAAV,OAAAW,UAAAC,eAAAnB,KAAAgB,EAAAC,IAGtDxB,EAAA2B,EAAA,GAIA3B,IAAA4B,EAAA,oBCnEAzB,EAAAD,QAAA2B,qFCGA,IAAAC,EAAA,oBAAAA,KAKA,OADWA,EAAAC,KAAe,GAC1BD,EALA,GAAa5B,EAAA4B,sFCHb,IAAAD,EAAA7B,EAAA,GAGAgC,EAAA,oBAAAA,IAEIC,KAAAC,SAA2B,IAAIL,EAAMM,cAAc,GAAI,IACvDF,KAAAG,SAA2B,IAAIP,EAAMQ,mBAAmBC,MAAO,WAC/DL,KAAAM,MAAwB,IAAIV,EAAMW,KAAKP,KAAKC,SAAUD,KAAKG,UAEnDH,KAAAQ,WACJC,EAAG,EACHC,EAAG,EACHC,EAAG,GAgDX,OA7CIZ,EAAAP,UAAAoB,YAAA,SAAYN,GAEJN,KAAKM,MADI,MAATA,EACaA,EAEA,IAAIV,EAAMW,KAAKP,KAAKC,SAAUD,KAAKG,WAIxDJ,EAAAP,UAAAqB,YAAA,SAAYC,GACRd,KAAKC,SAAWa,EAChBd,KAAKY,eAGTb,EAAAP,UAAAuB,YAAA,SAAYZ,GACRH,KAAKG,SAAWA,EAChBH,KAAKY,eAGTb,EAAAP,UAAAwB,KAAA,SAAKC,GACDjB,KAAKQ,UAAUC,EAAIQ,EACnBjB,KAAKM,MAAMY,SAAST,EAAIQ,GAG5BlB,EAAAP,UAAA2B,KAAA,SAAKC,GACDpB,KAAKQ,UAAUE,EAAIU,EACnBpB,KAAKM,MAAMY,SAASR,EAAIU,GAG5BvC,OAAAC,eAAIiB,EAAAP,UAAA,cAKJ,WACI,OAAOQ,KAAKQ,UAAUG,OAN1B,SAAWU,GACPrB,KAAKQ,UAAUG,EAAIU,EACnBrB,KAAKM,MAAMY,SAASP,EAAIU,mCAO5BtB,EAAAP,UAAA8B,YAAA,SAAYC,GACRvB,KAAKgB,KAAKO,EAAYd,GACtBT,KAAKmB,KAAKI,EAAYb,IAG1B7B,OAAAC,eAAIiB,EAAAP,UAAA,gBAAJ,WACI,OAAQiB,EAAGT,KAAKQ,UAAUC,EAAGC,EAAGV,KAAKQ,UAAUE,oCAEvDX,EAzDA,GAAa9B,EAAA8B,0FCHb,IAAAH,EAAA7B,EAAA,GAEAyD,EAAA,WAMA,OAHI,WACIxB,KAAKyB,MAAQ,IAAI7B,EAAM4B,OAJ/B,GAAsBvD,EAAAuD,uFCFTvD,EAAAyD,OAAQ,EAErB,IAAAC,EAAA,WACA,OADA,gBAAa1D,EAAA0D,0FCDb,IAAA/B,EAAA7B,EAAA,GAEA6D,EAAA,WAIA,OAJA,WAEI5B,KAAAG,SAAW,IAAIP,EAAMQ,mBAAmBC,MAAO,YAFnD,GAAapC,EAAA2D,4YCHb,IAAAC,EAAA9D,EAAA,GAEA+D,EAAA/D,EAAA,GAEAgE,EAAA,SAAAC,GAAA,SAAAD,IAAA,IAAAE,EAAA,OAAAD,KAAAE,MAAAlC,KAAAmC,YAAAnC,YAEIiC,EAAAG,eACI3B,EAAG,EACHC,EAAG,KAaX,OAjBiC2B,EAAAN,EAAAC,GAO7BD,EAAAvC,UAAAwB,KAAA,SAAKsB,GACDtC,KAAKoC,cAAc3B,EAAI6B,EACvBN,EAAAxC,UAAMwB,KAAI1C,KAAA0B,KAACsC,EAASR,EAAAjC,KAAKC,OAG7BiC,EAAAvC,UAAA2B,KAAA,SAAKoB,GACDvC,KAAKoC,cAAc1B,EAAI6B,EACvBP,EAAAxC,UAAM2B,KAAI7C,KAAA0B,KAACuC,EAAST,EAAAjC,KAAKC,OAGjCiC,EAjBA,CAAiCF,EAAA9B,UAApB9B,EAAA8D,+YCHb,IAAAD,EAAA/D,EAAA,GACA6B,EAAA7B,EAAA,GAGAyE,EAAA,SAAAR,GAKI,SAAAQ,EAAYC,EAAmBC,EAAoBC,GAAnD,IAAAV,EACID,EAAA1D,KAAA0B,OAAOA,YAEPiC,EAAKU,KAAOA,EACZV,EAAKW,eAAeH,EAAWC,GAC/BT,EAAKlB,YAAYkB,EAAKU,KAAKxC,UAE3B8B,EAAKrB,gBAgBb,OA5B0ByB,EAAAG,EAAAR,GAetBQ,EAAAhD,UAAAoD,eAAA,SAAeC,EAAeC,GAC1B9C,KAAK+C,UACDF,MAAOA,EACPC,OAAQA,GAGZ9C,KAAKa,YACD,IAAIjB,EAAMM,cAAcF,KAAK+C,SAASF,MAAQf,EAAAjC,KAAKC,KAC/CE,KAAK+C,SAASD,OAAShB,EAAAjC,KAAKC,OAGpCE,KAAKY,eAEb4B,EA5BA,CAFAzE,EAAA,GAE0BgE,aAAb9D,EAAAuE,sFCiBbvE,EAAA+E,iBAAA,SAAiCC,GAC7B,OAAOA,GAAWC,KAAKC,GAAK,uYCvBhC,IAAAC,EAAArF,EAAA,GACAsF,EAAAtF,EAAA,GAEA+D,EAAA/D,EAAA,GACAuF,EAAAvF,EAAA,GACA6B,EAAA7B,EAAA,GAEAwF,EAAA,SAAAvB,GAYI,SAAAuB,EAAY9C,EAAWC,GAAvB,IAAAuB,EACID,EAAA1D,KAAA0B,OAAOA,YAXXiC,EAAAuB,eACI/C,EAAG,EACHC,EAAG,GAUHuB,EAAKjB,KAAKP,GACVwB,EAAKd,KAAKT,GACN4C,EAAA5B,OACAO,EAAKwB,YAgCjB,OAjD2BpB,EAAAkB,EAAAvB,GAqBvBuB,EAAA/D,UAAAwB,KAAA,SAAKC,GACDjB,KAAKwD,cAAc/C,EAAIQ,EACvBjB,KAAK0D,uBAGTH,EAAA/D,UAAA2B,KAAA,SAAKC,GACDpB,KAAKwD,cAAc9C,EAAIU,EACvBpB,KAAK0D,uBAGDH,EAAA/D,UAAAkE,oBAAR,WACI1D,KAAKyB,MAAMP,SAAST,EAAIT,KAAKwD,cAAc/C,EAAI8C,EAAMR,SAASF,MAAQf,EAAAjC,KAAKC,KAC3EE,KAAKyB,MAAMP,SAASR,EAAIV,KAAKwD,cAAc9C,EAAI6C,EAAMR,SAASD,OAAShB,EAAAjC,KAAKC,MAGhFyD,EAAA/D,UAAAmE,YAAA,SAAYlF,GACRuB,KAAKyB,MAAMmC,IAAInF,EAAE6B,QAMrBiD,EAAA/D,UAAAiE,QAAA,WACI,IAAII,EAAS,IAAIjE,EAAMkE,WAAWP,EAAMR,SAASF,MAAQf,EAAAjC,KAAKC,KAAMyD,EAAMR,SAASF,OACnFgB,EAAOE,QAAQX,EAAAJ,iBAAiB,KAChChD,KAAKyB,MAAMmC,IAAIC,IAvCZN,EAAAR,UACHF,MAAO,GACPC,OAAQ,IAwChBS,EAjDA,CAA2BF,EAAA7B,OAAdvD,EAAAsF,yYCNb,IAAAF,EAAAtF,EAAA,GACAiG,EAAAjG,EAAA,GACAkG,EAAAlG,EAAA,GACAmG,EAAAnG,EAAA,GAEAoG,EAAA,SAAAnC,GAOI,SAAAmC,IAAA,IAAAlC,EACID,EAAA1D,KAAA0B,OAAOA,KANXiC,EAAAmC,WACIvB,MAAO,IACPC,OAAQ,KAKR,IAAIuB,EAAQ,IAAIL,EAAAT,MAAM,EAAG,GAErBe,EAAO,IAAIL,EAAAzB,KAAK,EAAG,EAAG,IAAI0B,EAAAtC,iBAC9ByC,EAAMV,YAAYW,IAElBA,EAAO,IAAIL,EAAAzB,KAAK,EAAG,EAAG,IAAI0B,EAAAtC,WACrBZ,KAAK,IACVqD,EAAMV,YAAYW,GAClBrC,EAAKsC,SAASF,GAEdA,EAAQ,IAAIL,EAAAT,MAAM,EAAG,GACrBe,EAAO,IAAIL,EAAAzB,KAAK,GAAI,GAAI,IAAI0B,EAAAtC,UAC5ByC,EAAMV,YAAYW,GAClBrC,EAAKsC,SAASF,KAQtB,OA9B2BhC,EAAA8B,EAAAnC,GA0BvBmC,EAAA3E,UAAA+E,SAAA,SAAS/F,GACLwB,KAAKyB,MAAMmC,IAAIpF,EAAEiD,QAGzB0C,EA9BA,CAA2Bd,EAAA7B,OAAdvD,EAAAkG,yYCLb,IAEAK,EAAA,SAAAxC,GAAA,SAAAwC,IAAA,IAAAvC,EAAA,OAAAD,KAAAE,MAAAlC,KAAAmC,YAAAnC,YAEIiC,EAAAuB,eACI/C,EAAG,EACHC,EAAG,KAGX,OAP+B2B,EAAAmC,EAAAxC,GAO/BwC,EAPA,CAFAzG,EAAA,GAE+BgC,UAAlB9B,EAAAuG,6YCHb,IAEAC,EAAA,SAAAzC,GAEI,SAAAyC,IAAA,IAAAxC,EACID,EAAA1D,KAAA0B,OAAOA,YACPiC,EAAKyC,OAAS,IAGtB,OAP4BrC,EAAAoC,EAAAzC,GAO5ByC,EAPA,CAFA1G,EAAA,IAE4ByG,WAAfvG,EAAAwG,wFCFb,IAAA7E,EAAA7B,EAAA,GACA8D,EAAA9D,EAAA,GAIAuF,EAAAvF,EAAA,GAEA4G,EAAA,WAUI,SAAAA,IAAA,IAAA1C,EAAAjC,KAFAA,KAAA4E,aAAuB,EA4CvB5E,KAAA6E,WAAa,WAET5C,EAAK6C,YACL7C,EAAK8C,aAGL9C,EAAK+C,OAAOC,KAAOhD,EAAKY,OAAS,EACjCZ,EAAK+C,OAAOE,MAAQjD,EAAKY,MAAQ,EACjCZ,EAAK+C,OAAOG,IAAMlD,EAAKa,OAAS,EAChCb,EAAK+C,OAAOI,OAASnD,EAAKa,QAAU,EACpCb,EAAK+C,OAAOK,yBAGZpD,EAAKqD,SAASC,QAAQtD,EAAKY,MAAOZ,EAAKa,QACvCb,EAAKuD,UA8BTxF,KAAAyF,KAAO,WACCxD,EAAK2C,aACLc,sBAAsBzD,EAAKwD,MAG/BxD,EAAKuD,UAzFLxF,KAAK8E,YACL9E,KAAK+E,aAGL/E,KAAK2F,YACL3F,KAAK4F,aACL5F,KAAK6F,eAGDvC,EAAA5B,OACA1B,KAAK8F,mBAIT9F,KAAK+F,YA2Ib,OApIIpB,EAAAnF,UAAAwG,OAAA,SAAOvF,GACHT,KAAKgF,OAAOgB,OAAOvF,EAAEH,MAAMY,WAO/ByD,EAAAnF,UAAAyG,OAAA,SAAOxF,GACCA,aAAaoB,EAAA9B,SACbC,KAAKkG,MAAMtC,IAAInD,EAAEH,OAEjBN,KAAKkG,MAAMtC,IAAInD,EAAEgB,QA2BzBkD,EAAAnF,UAAAgG,OAAA,WACIxF,KAAKmG,SAASX,SACdxF,KAAKoG,UAMTzB,EAAAnF,UAAAuG,UAAA,WACIM,OAAOX,sBAAsB1F,KAAKyF,MAClCzF,KAAK4E,aAAc,GAMvBD,EAAAnF,UAAA8G,SAAA,WACItG,KAAK4E,aAAc,GAsBvBD,EAAAnF,UAAAsF,UAAA,WAEI,OADA9E,KAAK6C,MAAQwD,OAAOE,WACbvG,KAAK6C,OAQhB8B,EAAAnF,UAAAuF,WAAA,WAEI,OADA/E,KAAK8C,OAASuD,OAAOG,YACdxG,KAAK8C,QAMhB6B,EAAAnF,UAAAmG,UAAA,WACI3F,KAAKkG,MAAQ,IAAItG,EAAM6G,OAM3B9B,EAAAnF,UAAAoG,WAAA,WACI5F,KAAKgF,OAAS,IAAIpF,EAAM8G,mBAAmB1G,KAAK6C,OAAS,EAAG7C,KAAK6C,MAAQ,EAAG7C,KAAK8C,OAAS,EAAG9C,KAAK8C,QAAU,GAC5G9C,KAAKgF,OAAO9D,SAASyF,IAAI,EAAG,EAAG,KAMnChC,EAAAnF,UAAAqG,aAAA,WACI7F,KAAKsF,SAAW,IAAI1F,EAAMgH,cAC1B5G,KAAKsF,SAASC,QAAQvF,KAAK6C,MAAO7C,KAAK8C,QAEvC+D,EAAE,iBAAiB,GAAGC,YAAY9G,KAAKsF,SAASyB,aAMpDpC,EAAAnF,UAAAsG,iBAAA,WACI9F,KAAKmG,SAAW,IAAIvG,EAAMoH,cAAchH,KAAKgF,QAC7ChF,KAAKmG,SAASX,UAMlBb,EAAAnF,UAAA4G,OAAA,WACIpG,KAAKsF,SAASc,OAAOpG,KAAKkG,MAAOlG,KAAKgF,SAE9CL,EArKA,GAAa1G,EAAA0G,wFCPb,IAAAsC,EAAAlJ,EAAA,IACAmJ,EAAAnJ,EAAA,IACAoJ,EAAApJ,EAAA,IAEAqJ,EAAA,WAMI,SAAAA,IACIpH,KAAKqH,aACLrH,KAAKsH,YACLtH,KAAKuH,WACLvH,KAAKwH,OAAOpB,SAiBpB,OAdIgB,EAAA5H,UAAA6H,WAAA,WACIrH,KAAKwH,OAAS,IAAIP,EAAAtC,QAGtByC,EAAA5H,UAAA8H,UAAA,WACItH,KAAKyH,OAAS,IAAIP,EAAAzC,OAClBzE,KAAKwH,OAAOvB,OAAOjG,KAAKyH,SAG5BL,EAAA5H,UAAA+H,SAAA,WACIvH,KAAK0H,MAAQ,IAAIP,EAAAhD,MACjBnE,KAAKwH,OAAOvB,OAAOjG,KAAK0H,QAGhCN,EA3BA,GAAanJ,EAAAmJ,sFCJb,IAEIO,EAAO,IAFX5J,EAAA,IAEeqJ,MAEff,OAAOuB,iBAAiB,SAAUD,EAAKH,OAAO3C","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 16);\n","module.exports = THREE;","import { Size2D } from \"./helpers\";\r\nimport { Drawable } from \"./drawable\";\r\n\r\nexport class Tile {\r\n\r\n    material: THREE.Material;\r\n\r\n    static size: number = 20;\r\n}","import * as THREE from \"three\";\r\nimport { Position3D, Position2D } from \"./helpers\";\r\n\r\nexport class Drawable {\r\n\r\n    geometry: THREE.Geometry = new THREE.PlaneGeometry(20, 20);\r\n    material: THREE.Material = new THREE.MeshBasicMaterial({color: 0xff0000});\r\n    shape: THREE.Object3D = new THREE.Mesh(this.geometry, this.material);\r\n\r\n    private _position: Position3D = {\r\n        x: 0,\r\n        y: 0,\r\n        z: 0\r\n    }\r\n\r\n    updateShape(shape?: THREE.Object3D) {\r\n        if (shape != null) {\r\n            this.shape = shape;\r\n        } else {\r\n            this.shape = new THREE.Mesh(this.geometry, this.material);\r\n        }\r\n    }\r\n\r\n    setGeometry(geo: THREE.Geometry) {\r\n        this.geometry = geo;\r\n        this.updateShape();\r\n    }\r\n\r\n    setMaterial(material: THREE.Material) {\r\n        this.material = material;\r\n        this.updateShape();\r\n    }\r\n\r\n    setX(newx: number) {\r\n        this._position.x = newx;\r\n        this.shape.position.x = newx;\r\n    }\r\n\r\n    setY(newy: number) {\r\n        this._position.y = newy;\r\n        this.shape.position.y = newy;\r\n    }\r\n\r\n    set zindex(newz: number) {\r\n        this._position.z = newz;\r\n        this.shape.position.z = newz;\r\n    }\r\n\r\n    get zindex() {\r\n        return this._position.z;\r\n    }\r\n\r\n    setPosition(newposition: Position2D) {\r\n        this.setX(newposition.x);\r\n        this.setY(newposition.y);\r\n    }\r\n\r\n    get position(): Position2D {\r\n        return {x: this._position.x, y: this._position.y}\r\n    }\r\n}","import * as THREE from \"three\";\r\n\r\nexport abstract class Group {\r\n    group: THREE.Group;\r\n\r\n    constructor() {\r\n        this.group = new THREE.Group();\r\n    }\r\n}","export const DEBUG = true;\r\n\r\nexport class Settings {\r\n}","import {Tile} from \"../core/tile\";\r\nimport * as THREE from \"three\";\r\n\r\nexport class WoodTile implements Tile {\r\n\r\n    material = new THREE.MeshBasicMaterial({color: 0xDEB887});\r\n\r\n}","import { Drawable } from \"./drawable\";\r\nimport { Position2D } from \"./helpers\";\r\nimport { Tile } from \"./tile\";\r\n\r\nexport class WorldObject extends Drawable {\r\n    \r\n    chunkPosition: Position2D = {\r\n        x: 0,\r\n        y: 0\r\n    }\r\n\r\n    setX(chunkX: number) {\r\n        this.chunkPosition.x = chunkX;\r\n        super.setX(chunkX * Tile.size);\r\n    }\r\n\r\n    setY(chunkY: number) {\r\n        this.chunkPosition.y = chunkY;\r\n        super.setY(chunkY * Tile.size);\r\n    }\r\n\r\n}","import { Size2D } from \"./helpers\";\r\nimport { Tile } from \"./tile\";\r\nimport * as THREE from \"three\";\r\nimport { WorldObject } from \"./worldobject\";\r\n\r\nexport class Wall extends WorldObject {\r\n\r\n    tile: Tile;\r\n    tileSize: Size2D;\r\n\r\n    constructor(tileWidth: number, tileHeight: number, tile: Tile) {\r\n        super();\r\n\r\n        this.tile = tile;\r\n        this.updateTileSize(tileWidth, tileHeight);\r\n        this.setMaterial(this.tile.material);\r\n        \r\n        this.updateShape();\r\n    }\r\n\r\n    updateTileSize(width: number, height: number) {\r\n        this.tileSize = {\r\n            width: width,\r\n            height: height\r\n        }\r\n\r\n        this.setGeometry(\r\n            new THREE.PlaneGeometry(this.tileSize.width * Tile.size, \r\n                this.tileSize.height * Tile.size\r\n        ));\r\n\r\n        this.updateShape();\r\n    }\r\n}","export interface Position2D {\r\n    x: number;\r\n    y: number;\r\n}\r\n\r\nexport interface Position3D {\r\n    x: number;\r\n    y: number;\r\n    z: number;\r\n}\r\n\r\nexport interface Size2D {\r\n    width: number;\r\n    height: number;\r\n}\r\n\r\nexport interface Size3D {\r\n    width: number;\r\n    height: number;\r\n    depth: number;\r\n}\r\n\r\nexport function degreesToRadians(degrees: number) {\r\n    return degrees * (Math.PI / 180);\r\n}","import { Size2D, Position2D, degreesToRadians } from \"./helpers\";\r\nimport {Group} from \"../core/group\";\r\nimport { Drawable } from \"./drawable\";\r\nimport { Tile } from \"./tile\";\r\nimport { DEBUG } from \"./settings\";\r\nimport * as THREE from \"three\";\r\n\r\nexport class Chunk extends Group {\r\n\r\n    worldPosition: Position2D = {\r\n        x: 0,\r\n        y: 0\r\n    }\r\n\r\n    static tileSize: Size2D = {\r\n        width: 20,\r\n        height: 20\r\n    }\r\n\r\n    constructor(x: number, y: number) {\r\n        super();\r\n        this.setX(x);\r\n        this.setY(y);\r\n        if (DEBUG) {\r\n            this.addGrid();\r\n        }\r\n    }\r\n\r\n    setX(newx: number) {\r\n        this.worldPosition.x = newx;\r\n        this.updateGroupPosition();\r\n    }\r\n\r\n    setY(newy: number) {\r\n        this.worldPosition.y = newy;\r\n        this.updateGroupPosition();\r\n    }\r\n\r\n    private updateGroupPosition() {\r\n        this.group.position.x = this.worldPosition.x * Chunk.tileSize.width * Tile.size;\r\n        this.group.position.y = this.worldPosition.y * Chunk.tileSize.height * Tile.size;\r\n    }\r\n\r\n    addDrawable(d: Drawable) {\r\n        this.group.add(d.shape);\r\n    }\r\n\r\n    /**\r\n     * Add a grid to the chunk\r\n     */\r\n    addGrid() {\r\n        let helper = new THREE.GridHelper(Chunk.tileSize.width * Tile.size, Chunk.tileSize.width);\r\n        helper.rotateX(degreesToRadians(90));\r\n        this.group.add(helper);\r\n    }\r\n    \r\n}","import { Size2D } from \"../core/helpers\";\r\nimport { Group } from \"../core/group\";\r\nimport { Chunk } from \"../core/chunk\";\r\nimport { Wall } from \"../core/wall\";\r\nimport { WoodTile } from \"../tiles/wood\";\r\n\r\nexport class World extends Group {\r\n\r\n    chunkSize: Size2D = {\r\n        width: 5000, \r\n        height: 5000\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        let chunk = new Chunk(0, 0);\r\n\r\n        let wall = new Wall(8, 1, new WoodTile());\r\n        chunk.addDrawable(wall);\r\n\r\n        wall = new Wall(8, 1, new WoodTile());\r\n        wall.setX(12);\r\n        chunk.addDrawable(wall);\r\n        this.addChunk(chunk);\r\n\r\n        chunk = new Chunk(1, 0);\r\n        wall = new Wall(20, 20, new WoodTile());\r\n        chunk.addDrawable(wall);\r\n        this.addChunk(chunk);\r\n\r\n    }\r\n\r\n    addChunk(c: Chunk) {\r\n        this.group.add(c.group);\r\n    }\r\n\r\n}","import {Position2D} from \"../core/helpers\";\r\nimport { Drawable } from \"../core/drawable\";\r\n\r\nexport class Character extends Drawable {\r\n\r\n    worldPosition: Position2D = {\r\n        x: 0,\r\n        y: 0\r\n    };\r\n\r\n}","import { Character } from \"./character\";\r\n\r\nexport class Player extends Character {\r\n\r\n    constructor() {\r\n        super();\r\n        this.zindex = 1;\r\n    }\r\n\r\n}","import * as THREE from \"three\";\r\nimport { Drawable } from \"../core/drawable\";\r\nimport { Group } from \"./group\";\r\nimport { Chunk } from \"./chunk\";\r\nimport { Tile } from \"./tile\";\r\nimport { DEBUG } from \"./settings\";\r\n\r\nexport class Canvas {\r\n\r\n    scene: THREE.Scene;\r\n    camera: THREE.OrthographicCamera;\r\n    renderer: THREE.Renderer;\r\n    controls: THREE.OrbitControls;\r\n    width: number;\r\n    height: number;\r\n    loopRunning: boolean = false;\r\n\r\n    constructor() {\r\n        // calculate dimensions\r\n        this.calcWidth();\r\n        this.calcHeight();\r\n\r\n        //set scene, camera and renderer\r\n        this.loadScene();\r\n        this.loadCamera();\r\n        this.loadRenderer();\r\n\r\n        // add debug thingies\r\n        if (DEBUG) {\r\n            this.addOrbitControls();\r\n        }\r\n\r\n        // start the loop\r\n        this.startLoop();\r\n    }\r\n\r\n    /**\r\n     * Make the camera look at a drawable\r\n     * @param x drawable you want the camera to look at\r\n     */\r\n    lookAt(x: Drawable) {\r\n        this.camera.lookAt(x.shape.position);\r\n    }\r\n\r\n    /**\r\n     * Append a drawable to the canvas\r\n     * @param x Drawable\r\n     */\r\n    append(x: Drawable | Group) {\r\n        if (x instanceof Drawable) {\r\n            this.scene.add(x.shape);\r\n        } else {\r\n            this.scene.add(x.group);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Update the size of the canvas, camera, renderer etc\r\n     */\r\n    updateSize = () => {\r\n        // calculate width\r\n        this.calcWidth();\r\n        this.calcHeight();\r\n\r\n        //update camera\r\n        this.camera.left = this.width / -2;\r\n        this.camera.right = this.width / 2;\r\n        this.camera.top = this.height / 2;\r\n        this.camera.bottom = this.height / -2;\r\n        this.camera.updateProjectionMatrix();\r\n\r\n        // set renderer size\r\n        this.renderer.setSize(this.width, this.height);\r\n        this.update();\r\n    }\r\n\r\n    /**\r\n     * Update the renderer\r\n     */\r\n    update() {\r\n        this.controls.update();\r\n        this.render();\r\n    }\r\n\r\n    /**\r\n     * Start the \"game loop\"\r\n     */\r\n    startLoop() {\r\n        window.requestAnimationFrame(this.loop);\r\n        this.loopRunning = true;\r\n    }\r\n\r\n    /**\r\n     * Stop the \"game loop\"\r\n     */\r\n    stopLoop() {\r\n        this.loopRunning = false;\r\n    }\r\n\r\n\r\n    /**\r\n     * \"game loop\"\r\n     */\r\n    loop = () => {\r\n        if (this.loopRunning) {\r\n            requestAnimationFrame(this.loop);\r\n        }\r\n\r\n        this.update();\r\n    }\r\n\r\n\r\n\r\n    /**\r\n     * Calculate and set the width of the canvas\r\n     * If you want to just get the canvas width use Canvas.width\r\n     * @returns the width of the canvas\r\n     */\r\n    calcWidth(): number {\r\n        this.width = window.innerWidth;\r\n        return this.width;\r\n    }\r\n\r\n    /**\r\n     * Calculate and set the height of the canvas\r\n     * If you want to just get the canvas height use Canvas.height\r\n     * @returns the height of the canvas\r\n     */\r\n    calcHeight(): number {\r\n        this.height = window.innerHeight;\r\n        return this.height;\r\n    }\r\n\r\n    /**\r\n     * Load the scene into memory\r\n     */\r\n    loadScene(): void {\r\n        this.scene = new THREE.Scene();\r\n    }\r\n\r\n    /**\r\n     * Load the camera into memory\r\n     */\r\n    loadCamera(): void {\r\n        this.camera = new THREE.OrthographicCamera(this.width / -2, this.width / 2, this.height / 2, this.height / -2);\r\n        this.camera.position.set(0, 0, 50);\r\n    }\r\n\r\n    /**\r\n     * Load the renderer into memory\r\n     */\r\n    loadRenderer(): void {\r\n        this.renderer = new THREE.WebGLRenderer();\r\n        this.renderer.setSize(this.width, this.height);\r\n        // append the dom element\r\n        $(\"#canvas-frame\")[0].appendChild(this.renderer.domElement);\r\n    }\r\n\r\n    /**\r\n     * Add orbitcontrols into the canvas\r\n     */\r\n    addOrbitControls(): void {\r\n        this.controls = new THREE.OrbitControls(this.camera);\r\n        this.controls.update();\r\n    }\r\n\r\n    /**\r\n     * Render the canvas\r\n     */\r\n    render(): void {\r\n        this.renderer.render(this.scene, this.camera);\r\n    }\r\n}","import { Canvas } from \"../core/canvas\";\r\nimport { Player } from \"./player\";\r\nimport { World } from \"./world\";\r\n\r\nexport class Game {\r\n\r\n    world: World;\r\n    player: Player;\r\n    canvas: Canvas;\r\n\r\n    constructor() {\r\n        this.loadCanvas();\r\n        this.newPlayer();\r\n        this.newWorld();\r\n        this.canvas.render();\r\n    }\r\n\r\n    loadCanvas(): void {\r\n        this.canvas = new Canvas();\r\n    }\r\n\r\n    newPlayer(): void {\r\n        this.player = new Player();\r\n        this.canvas.append(this.player);\r\n    }\r\n\r\n    newWorld(): void {\r\n        this.world = new World();\r\n        this.canvas.append(this.world);\r\n    }\r\n\r\n}","import {Game} from \"./ts/classes/game\";\r\n\r\nlet game = new Game();\r\n\r\nwindow.addEventListener(\"resize\", game.canvas.updateSize);"],"sourceRoot":""}