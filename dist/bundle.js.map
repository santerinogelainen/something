{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///external \"THREE\"","webpack:///./src/ts/core/tile.ts","webpack:///./src/ts/core/drawable.ts","webpack:///./src/ts/core/group.ts","webpack:///./src/ts/tiles/wood.ts","webpack:///./src/ts/core/worldobject.ts","webpack:///./src/ts/core/wall.ts","webpack:///./src/ts/core/chunk.ts","webpack:///./src/ts/classes/world.ts","webpack:///./src/ts/classes/character.ts","webpack:///./src/ts/classes/player.ts","webpack:///./src/ts/core/canvas.ts","webpack:///./src/ts/classes/game.ts","webpack:///./src/index.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","object","property","prototype","hasOwnProperty","p","s","THREE","Tile","size","Drawable","this","geometry","PlaneGeometry","material","MeshBasicMaterial","color","shape","Mesh","_position","x","y","z","updateShape","setGeometry","geo","setMaterial","setX","newx","position","setY","newy","newz","setPosition","newposition","Group","group","WoodTile","drawable_1","tile_1","WorldObject","_super","_this","apply","arguments","chunkPosition","__extends","chunkX","chunkY","Wall","tileWidth","tileHeight","tile","updateTileSize","width","height","tileSize","group_1","Chunk","worldPosition","addGrid","updateGroupPosition","addDrawable","add","GridHelper","chunk_1","wall_1","wood_1","World","chunkSize","chunk","wall","addChunk","Character","Player","zindex","Canvas","updateSize","calcWidth","calcHeight","camera","left","right","top","bottom","updateProjectionMatrix","renderer","setSize","controls","update","render","loadScene","loadCamera","loadRenderer","lookAt","append","scene","window","innerWidth","innerHeight","Scene","OrthographicCamera","OrbitControls","set","WebGLRenderer","$","appendChild","domElement","canvas_1","player_1","world_1","Game","loadCanvas","newPlayer","newWorld","canvas","player","world","game","addEventListener"],"mappings":"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","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 14);\n","module.exports = THREE;","import { Size2D } from \"./helpers\";\r\nimport { Drawable } from \"./drawable\";\r\n\r\nexport class Tile {\r\n\r\n    material: THREE.Material;\r\n\r\n    static size: number = 20;\r\n}","import * as THREE from \"three\";\r\nimport { Position3D, Position2D } from \"./helpers\";\r\n\r\nexport class Drawable {\r\n\r\n    geometry: THREE.Geometry = new THREE.PlaneGeometry(20, 20);\r\n    material: THREE.Material = new THREE.MeshBasicMaterial({color: 0xff0000});\r\n    shape: THREE.Object3D = new THREE.Mesh(this.geometry, this.material);\r\n\r\n    private _position: Position3D = {\r\n        x: 0,\r\n        y: 0,\r\n        z: 0\r\n    }\r\n\r\n    updateShape(shape?: THREE.Object3D) {\r\n        if (shape != null) {\r\n            this.shape = shape;\r\n        } else {\r\n            this.shape = new THREE.Mesh(this.geometry, this.material);\r\n        }\r\n    }\r\n\r\n    setGeometry(geo: THREE.Geometry) {\r\n        this.geometry = geo;\r\n        this.updateShape();\r\n    }\r\n\r\n    setMaterial(material: THREE.Material) {\r\n        this.material = material;\r\n        this.updateShape();\r\n    }\r\n\r\n    setX(newx: number) {\r\n        this._position.x = newx;\r\n        this.shape.position.x = newx;\r\n    }\r\n\r\n    setY(newy: number) {\r\n        this._position.y = newy;\r\n        this.shape.position.y = newy;\r\n    }\r\n\r\n    set zindex(newz: number) {\r\n        this._position.z = newz;\r\n        this.shape.position.z = newz;\r\n    }\r\n\r\n    get zindex() {\r\n        return this._position.z;\r\n    }\r\n\r\n    setPosition(newposition: Position2D) {\r\n        this.setX(newposition.x);\r\n        this.setY(newposition.y);\r\n    }\r\n\r\n    get position(): Position2D {\r\n        return {x: this._position.x, y: this._position.y}\r\n    }\r\n}","import * as THREE from \"three\";\r\n\r\nexport abstract class Group {\r\n    group: THREE.Group;\r\n\r\n    constructor() {\r\n        this.group = new THREE.Group();\r\n    }\r\n}","import {Tile} from \"../core/tile\";\r\nimport * as THREE from \"three\";\r\n\r\nexport class WoodTile implements Tile {\r\n\r\n    material = new THREE.MeshBasicMaterial({color: 0xDEB887});\r\n\r\n}","import { Drawable } from \"./drawable\";\r\nimport { Position2D } from \"./helpers\";\r\nimport { Tile } from \"./tile\";\r\n\r\nexport class WorldObject extends Drawable {\r\n    \r\n    chunkPosition: Position2D = {\r\n        x: 0,\r\n        y: 0\r\n    }\r\n\r\n    setX(chunkX: number) {\r\n        this.chunkPosition.x = chunkX;\r\n        super.setX(chunkX * Tile.size);\r\n    }\r\n\r\n    setY(chunkY: number) {\r\n        this.chunkPosition.y = chunkY;\r\n        super.setY(chunkY * Tile.size);\r\n    }\r\n\r\n}","import { Size2D } from \"./helpers\";\r\nimport { Tile } from \"./tile\";\r\nimport * as THREE from \"three\";\r\nimport { WorldObject } from \"./worldobject\";\r\n\r\nexport class Wall extends WorldObject {\r\n\r\n    tile: Tile;\r\n    tileSize: Size2D;\r\n\r\n    constructor(tileWidth: number, tileHeight: number, tile: Tile) {\r\n        super();\r\n\r\n        this.tile = tile;\r\n        this.updateTileSize(tileWidth, tileHeight);\r\n        this.setMaterial(this.tile.material);\r\n        \r\n        this.updateShape();\r\n    }\r\n\r\n    updateTileSize(width: number, height: number) {\r\n        this.tileSize = {\r\n            width: width,\r\n            height: height\r\n        }\r\n\r\n        this.setGeometry(\r\n            new THREE.PlaneGeometry(this.tileSize.width * Tile.size, \r\n                this.tileSize.height * Tile.size\r\n        ));\r\n\r\n        this.updateShape();\r\n    }\r\n}","import { Size2D, Position2D } from \"./helpers\";\r\nimport {Group} from \"../core/group\";\r\nimport { Drawable } from \"./drawable\";\r\nimport { Tile } from \"./tile\";\r\nimport * as THREE from \"three\";\r\n\r\nexport class Chunk extends Group {\r\n\r\n    worldPosition: Position2D = {\r\n        x: 0,\r\n        y: 0\r\n    }\r\n\r\n    tileSize: Size2D = {\r\n        width: 20,\r\n        height: 20\r\n    }\r\n\r\n    constructor(x: number, y: number) {\r\n        super();\r\n        this.setX(x);\r\n        this.setY(y);\r\n        this.addGrid();\r\n    }\r\n\r\n    setX(newx: number) {\r\n        this.worldPosition.x = newx;\r\n        this.updateGroupPosition();\r\n    }\r\n\r\n    setY(newy: number) {\r\n        this.worldPosition.y = newy;\r\n        this.updateGroupPosition();\r\n    }\r\n\r\n    private updateGroupPosition() {\r\n        this.group.position.x = this.worldPosition.x * this.tileSize.width * Tile.size;\r\n        this.group.position.y = this.worldPosition.y * this.tileSize.height * Tile.size;\r\n    }\r\n\r\n    addDrawable(d: Drawable) {\r\n        this.group.add(d.shape);\r\n    }\r\n\r\n    addGrid() {\r\n        this.group.add(new THREE.GridHelper(this.tileSize.width * Tile.size, this.tileSize.width));\r\n    }\r\n}","import { Size2D } from \"../core/helpers\";\r\nimport { Group } from \"../core/group\";\r\nimport { Chunk } from \"../core/chunk\";\r\nimport { Wall } from \"../core/wall\";\r\nimport { WoodTile } from \"../tiles/wood\";\r\n\r\nexport class World extends Group {\r\n\r\n    chunkSize: Size2D = {\r\n        width: 5000, \r\n        height: 5000\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        let chunk = new Chunk(0, 0);\r\n\r\n        let wall = new Wall(8, 1, new WoodTile());\r\n        chunk.addDrawable(wall);\r\n\r\n        wall = new Wall(8, 1, new WoodTile());\r\n        wall.setX(12);\r\n        chunk.addDrawable(wall);\r\n        this.addChunk(chunk);\r\n\r\n        chunk = new Chunk(1, 0);\r\n        wall = new Wall(20, 20, new WoodTile());\r\n        chunk.addDrawable(wall);\r\n        this.addChunk(chunk);\r\n\r\n    }\r\n\r\n    addChunk(c: Chunk) {\r\n        this.group.add(c.group);\r\n    }\r\n\r\n}","import {Position2D} from \"../core/helpers\";\r\nimport { Drawable } from \"../core/drawable\";\r\n\r\nexport class Character extends Drawable {\r\n\r\n    worldPosition: Position2D = {\r\n        x: 0,\r\n        y: 0\r\n    };\r\n\r\n}","import { Character } from \"./character\";\r\n\r\nexport class Player extends Character {\r\n\r\n    constructor() {\r\n        super();\r\n        this.zindex = 1;\r\n    }\r\n\r\n}","import * as THREE from \"three\";\r\nimport { Drawable } from \"../core/drawable\";\r\nimport { Group } from \"./group\";\r\n\r\nexport class Canvas {\r\n\r\n    scene: THREE.Scene;\r\n    camera: THREE.OrthographicCamera;\r\n    renderer: THREE.Renderer;\r\n    controls: THREE.OrbitControls;\r\n    width: number;\r\n    height: number;\r\n\r\n    constructor() {\r\n        // calculate dimensions\r\n        this.calcWidth();\r\n        this.calcHeight();\r\n\r\n        //set scene, camera and renderer\r\n        this.loadScene();\r\n        this.loadCamera();\r\n        this.loadRenderer();\r\n    }\r\n\r\n    lookAt(x: Drawable) {\r\n        this.camera.lookAt(x.shape.position);\r\n    }\r\n\r\n    /**\r\n     * Append a drawable to the canvas\r\n     * @param x Drawable\r\n     */\r\n    append(x: Drawable | Group) {\r\n        if (x instanceof Drawable) {\r\n            this.scene.add(x.shape);\r\n        } else {\r\n            this.scene.add(x.group);\r\n        }\r\n    }\r\n\r\n    updateSize = () => {\r\n        // calculate width\r\n        this.calcWidth();\r\n        this.calcHeight();\r\n\r\n        //update camera\r\n        this.camera.left = this.width / -2;\r\n        this.camera.right = this.width / 2;\r\n        this.camera.top = this.height / 2;\r\n        this.camera.bottom = this.height / -2;\r\n        this.camera.updateProjectionMatrix();\r\n\r\n        // set renderer size\r\n        this.renderer.setSize(this.width, this.height);\r\n        this.controls.update();\r\n        this.render();\r\n    }\r\n\r\n    /**\r\n     * Calculate and set the width of the canvas\r\n     * If you want to just get the canvas width use Canvas.width\r\n     * @returns the width of the canvas\r\n     */\r\n    calcWidth(): number {\r\n        this.width = window.innerWidth;\r\n        return this.width;\r\n    }\r\n\r\n    /**\r\n     * Calculate and set the height of the canvas\r\n     * If you want to just get the canvas height use Canvas.height\r\n     * @returns the height of the canvas\r\n     */\r\n    calcHeight(): number {\r\n        this.height = window.innerHeight;\r\n        return this.height;\r\n    }\r\n\r\n    loadScene(): void {\r\n        this.scene = new THREE.Scene();\r\n    }\r\n\r\n    loadCamera(): void {\r\n        this.camera = new THREE.OrthographicCamera(this.width / -2, this.width / 2, this.height / 2, this.height / -2, 1, 1000);\r\n        this.controls = new THREE.OrbitControls(this.camera);\r\n        this.camera.position.set(0, 0, 50);\r\n        this.controls.update();\r\n    }\r\n\r\n    loadRenderer(): void {\r\n        this.renderer = new THREE.WebGLRenderer();\r\n        this.renderer.setSize(this.width, this.height);\r\n        // append the dom element\r\n        $(\"#canvas-frame\")[0].appendChild(this.renderer.domElement);\r\n    }\r\n\r\n    render(): void {\r\n        this.renderer.render(this.scene, this.camera);\r\n    }\r\n}","import { Canvas } from \"../core/canvas\";\r\nimport { Player } from \"./player\";\r\nimport { World } from \"./world\";\r\n\r\nexport class Game {\r\n\r\n    world: World;\r\n    player: Player;\r\n    canvas: Canvas;\r\n\r\n    constructor() {\r\n        this.loadCanvas();\r\n        this.newPlayer();\r\n        this.newWorld();\r\n        this.canvas.render();\r\n    }\r\n\r\n    loadCanvas(): void {\r\n        this.canvas = new Canvas();\r\n    }\r\n\r\n    newPlayer(): void {\r\n        this.player = new Player();\r\n        this.canvas.append(this.player);\r\n    }\r\n\r\n    newWorld(): void {\r\n        this.world = new World();\r\n        this.canvas.append(this.world);\r\n    }\r\n\r\n}","import {Game} from \"./ts/classes/game\";\r\n\r\nlet game = new Game();\r\n\r\nwindow.addEventListener(\"resize\", game.canvas.updateSize);"],"sourceRoot":""}